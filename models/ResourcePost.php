<?php

namespace app\models;

use app\components\QsBaseTime;
use app\components\QsEncodeHelper;
use Yii;

/**
 * This is the model class for table "resource_post".
 *
 * @property integer $id
 * @property integer $resourceid
 * @property integer $post_id
 * @property integer $post_userid
 * @property string $content
 * @property integer $status
 * @property integer $type
 * @property integer $time
 * @property integer $last_update_time
 * @property integer $dig
 * @property integer $bury
 * @property string $quoteids
 * @property integer $user
 * @property string $useragent
 * @property string $ip
 * @property string $referer
 */
class ResourcePost extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'resource_post';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['resourceid', 'post_id', 'post_userid', 'content', 'status', 'type', 'time', 'last_update_time', 'dig', 'bury', 'quoteids', 'user', 'useragent', 'ip', 'referer'], 'required'],
            [['resourceid', 'post_id', 'post_userid', 'status', 'type', 'time', 'last_update_time', 'dig', 'bury', 'user'], 'integer'],
            [['content', 'useragent'], 'string'],
            [['quoteids', 'referer'], 'string', 'max' => 400],
            [['ip'], 'string', 'max' => 20],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'resourceid' => 'Resourceid',
            'post_id' => 'Post ID',
            'post_userid' => 'Post Userid',
            'content' => 'Content',
            'status' => 'Status',
            'type' => '评论类型，默认为0网友发布，1为编辑发布，2为采集',
            'time' => 'Time',
            'last_update_time' => 'Last Update Time',
            'dig' => 'Dig',
            'bury' => 'Bury',
            'quoteids' => 'Quoteids',
            'user' => 'User',
            'useragent' => 'Useragent',
            'ip' => 'Ip',
            'referer' => 'Referer',
        ];
    }
    public function getSid() {
        return QsEncodeHelper::setSid($this->id);
    }

    public function getUserModel() {
        return $this->hasOne(User::className(), ['id'=>'user']);
    }

    public function getUserName()
    {
        return !empty($this->userModel) ? $this->userModel->nick_name : '';
    }

    public function getUserAvatar()
    {
        return !empty($this->userModel) ? QsEncodeHelper::setSid($this->userModel->avatar_img) : '';
    }

    public function getCreateTimeElapsed() {
        return QsBaseTime::time_get_past($this->time);
    }

    public function getCreateTime() {
        return $this->time;
    }
    public function getFloor() {
        $cache = yii::$app->cache;
        $key = "post_floor_" . $this->id;
        $data = $cache->get($key);
        if ($data === false) {
            $floor = ResourcePost::find()->where([
                'resourceid'=>$this->resourceid
            ])
                ->andWhere(['<','time',$this->time])
                ->count();

            $floorName = ['沙发', '板凳', '地板'];
            if (isset($floorName[$floor])) {
                $floor = $floorName[$floor];
            } else {
                $floor = ($floor + 1) . '楼';
            }
            // store $data in cache so that it can be retrieved next time
            $cache->set($key, $floor, $floorName[0]);
        }
        return $data;
    }

    public function getReply() {
        $reply = ResourcePost::findOne($this->post_id);
        if (empty($reply)) {
            return null;
        } else {
            return [
                "reply" => $reply->sid,
                "reply_content" => $reply->content,
                "reply_username" => $reply->userName,
            ];
        }
    }
    public function fields()
    {
        $fields = [
            'sid',
            'content',
            'userName',
            'userAvatar',
            'dig',
            'createTimeElapsed',
            'createTime',
            'floor',
            'reply',
        ];
        return $fields; // TODO: Change the autogenerated stub
    }
}
